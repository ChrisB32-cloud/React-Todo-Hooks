[{"/Users/chrisbrown/Desktop/react-todo-hooks/src/index.js":"1","/Users/chrisbrown/Desktop/react-todo-hooks/src/reportWebVitals.js":"2","/Users/chrisbrown/Desktop/react-todo-hooks/src/App.js":"3","/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoApp.js":"4","/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoForm.js":"5","/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoList.js":"6","/Users/chrisbrown/Desktop/react-todo-hooks/src/hooks/useInputState.js":"7","/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoTask.js":"8","/Users/chrisbrown/Desktop/react-todo-hooks/src/hooks/useToggle.js":"9","/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoEdit.js":"10"},{"size":500,"mtime":1609953622511,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1609953622512,"results":"13","hashOfConfig":"12"},{"size":258,"mtime":1610042035662,"results":"14","hashOfConfig":"12"},{"size":2237,"mtime":1610238299664,"results":"15","hashOfConfig":"12"},{"size":835,"mtime":1610123403569,"results":"16","hashOfConfig":"12"},{"size":768,"mtime":1610130125320,"results":"17","hashOfConfig":"12"},{"size":313,"mtime":1610034850171,"results":"18","hashOfConfig":"12"},{"size":2025,"mtime":1610130109447,"results":"19","hashOfConfig":"12"},{"size":229,"mtime":1610043243748,"results":"20","hashOfConfig":"12"},{"size":991,"mtime":1610237694471,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1bqbzom",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},"/Users/chrisbrown/Desktop/react-todo-hooks/src/index.js",[],["44","45"],"/Users/chrisbrown/Desktop/react-todo-hooks/src/reportWebVitals.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/App.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoApp.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoForm.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoList.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/hooks/useInputState.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoTask.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/hooks/useToggle.js",[],"/Users/chrisbrown/Desktop/react-todo-hooks/src/components/TodoEdit.js",["46"],"import React from 'react';\nimport useInputState from '../hooks/useInputState';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst TodoEdit = ({ taskPass, id, handleUpdate, closeUpdateForm }) => {\n  const [text, setText, resetText] = useInputState(taskPass);\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleUpdate({ id: id, task: text, completed: false });\n    closeUpdateForm(false);\n    resetText();\n  };\n  //   console.log(text);\n  return (\n    <Paper>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          value={text}\n          onChange={setText}\n          margin=\"normal\"\n          label=\"AddTodo\"\n          fullWidth\n        />\n        {/* <Button style={{ backgroundColor: '#807d75' }} type=\"submit\">\n          Update\n        </Button> */}\n        {/* <button type=\"submit\">Update</button> */}\n      </form>\n    </Paper>\n  );\n};\n\nexport default TodoEdit;\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":5,"column":8,"nodeType":"53","messageId":"54","endLine":5,"endColumn":14},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]